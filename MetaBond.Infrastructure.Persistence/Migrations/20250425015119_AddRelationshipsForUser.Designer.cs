// <auto-generated />
using System;
using MetaBond.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MetaBond.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(MetaBondContext))]
    [Migration("20250425015119_AddRelationshipsForUser")]
    partial class AddRelationshipsForUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "status", new[] { "pending", "accepted", "blocked" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MetaBond.Domain.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PkAdmin");

                    b.HasIndex("UserId");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Communities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PkCommunities");

                    b.ToTable("Communities", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.CommunityManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PkCommunityManager");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityManagers", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.CommunityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PkCommunityUser");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityUsers", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.EmailConfirmationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PkEmailConfirmationToken");

                    b.HasIndex("UserId");

                    b.ToTable("EmailConfirmationTokens", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.EventParticipation", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipationInEventId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "ParticipationInEventId");

                    b.HasIndex("ParticipationInEventId");

                    b.ToTable("EventParticipation", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Events", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommunitiesId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateAndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PkEvents");

                    b.HasIndex("CommunitiesId");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddresseeId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateAdt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RequesterId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PkFriendship");

                    b.HasIndex("AddresseeId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Friendship", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Interest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id")
                        .HasName("PkInterest");

                    b.ToTable("Interests", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Moderator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Moderators", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.ModeratorCommunity", b =>
                {
                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunitiesId")
                        .HasColumnType("uuid");

                    b.HasKey("ModeratorId", "CommunitiesId");

                    b.HasIndex("CommunitiesId");

                    b.ToTable("ModeratorCommunity", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.ParticipationInEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PkParticipationInEvent");

                    b.ToTable("ParticipationInEvent", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Posts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommunitiesId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PkPosts");

                    b.HasIndex("CommunitiesId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.ProgressBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunitiesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PkProgressBoard");

                    b.HasIndex("CommunitiesId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ProgressBoard", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.ProgressEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("ProgressBoardId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PkProgressEntry");

                    b.HasIndex("ProgressBoardId");

                    b.HasIndex("UserId");

                    b.ToTable("ProgressEntry", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Rewards", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateAwarded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("PointAwarded")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PkRewards");

                    b.HasIndex("UserId");

                    b.ToTable("Rewards", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PkUser");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.UserInterest", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("UserInterests", (string)null);
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Admin", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.User", "User")
                        .WithMany("AdminRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkAdminsUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.CommunityManager", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.Communities", "Community")
                        .WithMany("CommunityManagers")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FKCommunityManagerCommunity");

                    b.HasOne("MetaBond.Domain.Models.User", "User")
                        .WithMany("CommunityManagerRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkCommunityManagersUserId");

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.CommunityUser", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.Communities", "Community")
                        .WithMany("CommunityUsers")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkCommunitiesId");

                    b.HasOne("MetaBond.Domain.Models.User", "User")
                        .WithMany("CommunityMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkCommunityUsersUserId");

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.EmailConfirmationToken", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.User", "User")
                        .WithMany("EmailConfirmationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkEmailConfirmationTokensUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.EventParticipation", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.Events", "Event")
                        .WithMany("EventParticipations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkEvent");

                    b.HasOne("MetaBond.Domain.Models.ParticipationInEvent", "ParticipationInEvent")
                        .WithMany("EventParticipations")
                        .HasForeignKey("ParticipationInEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkParticipationInEvent");

                    b.Navigation("Event");

                    b.Navigation("ParticipationInEvent");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Events", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.Communities", "Communities")
                        .WithMany("Events")
                        .HasForeignKey("CommunitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkCommunitiesId");

                    b.Navigation("Communities");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Friendship", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.User", "Addressee")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("AddresseeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FkAddresseeId");

                    b.HasOne("MetaBond.Domain.Models.User", "Requester")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FkRequesterId");

                    b.Navigation("Addressee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Moderator", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.User", "User")
                        .WithMany("ModeratorRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkModeratorsUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.ModeratorCommunity", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.Communities", "Community")
                        .WithMany("ModeratorCommunities")
                        .HasForeignKey("CommunitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaBond.Domain.Models.Moderator", "Moderator")
                        .WithMany("ModeratorCommunities")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Posts", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.Communities", "Communities")
                        .WithMany("Posts")
                        .HasForeignKey("CommunitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkCommunities");

                    b.HasOne("MetaBond.Domain.Models.User", "CreatedBy")
                        .WithMany("Posts")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkPostsCreatedById");

                    b.Navigation("Communities");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.ProgressBoard", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.Communities", "Communities")
                        .WithOne("ProgressBoard")
                        .HasForeignKey("MetaBond.Domain.Models.ProgressBoard", "CommunitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkCommunitiesId");

                    b.HasOne("MetaBond.Domain.Models.User", "User")
                        .WithMany("ProgressBoards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkProgressBoardsUserId");

                    b.Navigation("Communities");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.ProgressEntry", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.ProgressBoard", "ProgressBoard")
                        .WithMany("ProgressEntries")
                        .HasForeignKey("ProgressBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkProgressBoardId");

                    b.HasOne("MetaBond.Domain.Models.User", "User")
                        .WithMany("ProgressEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkProgressEntriesUserId");

                    b.Navigation("ProgressBoard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Rewards", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkRewardsUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.UserInterest", b =>
                {
                    b.HasOne("MetaBond.Domain.Models.Interest", "Interest")
                        .WithMany("UserInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkInterestId");

                    b.HasOne("MetaBond.Domain.Models.User", "User")
                        .WithMany("Interests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FkUserInterestsUserId");

                    b.Navigation("Interest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Communities", b =>
                {
                    b.Navigation("CommunityManagers");

                    b.Navigation("CommunityUsers");

                    b.Navigation("Events");

                    b.Navigation("ModeratorCommunities");

                    b.Navigation("Posts");

                    b.Navigation("ProgressBoard");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Events", b =>
                {
                    b.Navigation("EventParticipations");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Interest", b =>
                {
                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.Moderator", b =>
                {
                    b.Navigation("ModeratorCommunities");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.ParticipationInEvent", b =>
                {
                    b.Navigation("EventParticipations");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.ProgressBoard", b =>
                {
                    b.Navigation("ProgressEntries");
                });

            modelBuilder.Entity("MetaBond.Domain.Models.User", b =>
                {
                    b.Navigation("AdminRoles");

                    b.Navigation("CommunityManagerRoles");

                    b.Navigation("CommunityMemberships");

                    b.Navigation("EmailConfirmationTokens");

                    b.Navigation("Interests");

                    b.Navigation("ModeratorRoles");

                    b.Navigation("Posts");

                    b.Navigation("ProgressBoards");

                    b.Navigation("ProgressEntries");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("Rewards");

                    b.Navigation("SentFriendRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
